@model ResetPasswordDto
@{
    ViewData["Title"] = "تغيير كلمة المرور";
    Layout = "_Layout";
}

<style>
    .reset-password-container {
        background: transparent;
        min-height: 100vh;
        padding: 2rem 0;
    }

    .reset-password-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        overflow: hidden;
        margin-bottom: 2rem;
        transition: transform 0.3s ease;
    }

        .reset-password-card:hover {
            transform: translateY(-5px);
        }

    .reset-password-header {
        background: #29504D !important;
        color: white;
        padding: 2rem;
        text-align: center;
        position: relative;
    }

        .reset-password-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: float 6s ease-in-out infinite;
        }

    @@keyframes float {
        0%, 100% {
            transform: translateY(0px) rotate(0deg);
        }

        50% {
            transform: translateY(-20px) rotate(180deg);
        }
    }

    .password-icon {
        width: 120px;
        height: 120px;
        background: rgba(255,255,255,0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1rem;
        border: 4px solid rgba(255,255,255,0.3);
        position: relative;
        z-index: 1;
    }

        .password-icon i {
            font-size: 3rem;
            color: white;
        }

    .reset-password-body {
        padding: 2rem;
    }

    .form-section {
        margin-bottom: 2rem;
    }

        .form-section h4 {
            color: #2c3e50;
            font-weight: bold;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #ecf0f1;
            position: relative;
        }

            .form-section h4::after {
                content: '';
                position: absolute;
                bottom: -2px;
                left: 0;
                width: 50px;
                height: 2px;
                background: #29504D;
            }

    .form-item {
        display: flex;
        align-items: center;
        padding: 1rem;
        margin-bottom: 1rem;
        background: #f8f9fa;
        border-radius: 10px;
        transition: all 0.3s ease;
        border-left: 4px solid transparent;
    }

        .form-item:hover {
            background: #e9ecef;
            border-left-color: #29504D;
            transform: translateX(5px);
        }

    .form-icon {
        width: 45px;
        height: 45px;
        background: #29504D !important;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 1rem;
        color: white;
        font-size: 1.2rem;
    }

    .form-content {
        flex: 1;
    }

    .form-label {
        font-size: 0.9rem;
        color: #6c757d;
        font-weight: 500;
        margin-bottom: 0.25rem;
        display: block;
    }

    .form-control {
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 12px 16px;
        font-size: 1rem;
        transition: all 0.3s ease;
        width: 100%;
    }

        .form-control:focus {
            border-color: #29504D;
            box-shadow: 0 0 0 0.2rem rgba(41, 80, 77, 0.25);
            transform: translateY(-1px);
        }

    .input-validation-error {
        border-color: #dc3545 !important;
        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
    }

    .field-validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    /* Hide default HTML5 validation messages */
    .form-control:invalid {
        border-color: #dc3545;
        box-shadow: none;
    }

    /* Hide any server-side validation messages that might appear */
    .text-danger:not(.password-validation-error) {
        display: none !important;
    }

    /* Ensure only our custom validation messages are visible */
    .password-validation-error {
        display: block !important;
        direction: rtl !important;
        text-align: right !important;
    }

    /* RTL direction for validation messages */
    .field-validation-error {
        direction: rtl !important;
        text-align: right !important;
    }

    /* RTL direction for input fields */
    .form-control {
        direction: rtl !important;
        text-align: right !important;
    }

    /* RTL direction for textarea */
    textarea.form-control {
        direction: rtl !important;
        text-align: right !important;
    }

    .alert-info {
        background: #e3f2fd;
        border: 1px solid #bbdefb;
        color: #1565c0;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .alert-success {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .alert-danger {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        border-radius: 10px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 2rem;
        flex-wrap: wrap;
    }

    .btn-modern {
        padding: 1rem 2rem;
        border-radius: 25px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
        border: none;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-save {
        background: #29504D !important;
        color: white;
    }

        .btn-save:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(41, 80, 77, 0.3);
            color: white;
            text-decoration: none;
        }

    .btn-cancel {
        background: #dc3545 !important;
        color: white;
    }

        .btn-cancel:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(220, 53, 69, 0.3);
            color: white;
            text-decoration: none;
        }

    .floating-shapes {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
    }

    .shape {
        position: absolute;
        background: rgba(41, 80, 77, 0.05);
        border-radius: 50%;
        animation: float-shapes 20s infinite linear;
    }

        .shape:nth-child(1) {
            width: 80px;
            height: 80px;
            top: 20%;
            left: 10%;
            animation-delay: 0s;
        }

        .shape:nth-child(2) {
            width: 120px;
            height: 120px;
            top: 60%;
            left: 80%;
            animation-delay: -5s;
        }

        .shape:nth-child(3) {
            width: 60px;
            height: 60px;
            top: 80%;
            left: 20%;
            animation-delay: -10s;
        }

    @@keyframes float-shapes {
        0%, 100% {
            transform: translateY(0px) rotate(0deg);
            opacity: 0.7;
        }

        50% {
            transform: translateY(-100px) rotate(180deg);
            opacity: 0.3;
        }
    }
</style>

<!-- Floating Background Shapes -->
<div class="floating-shapes">
    <div class="shape"></div>
    <div class="shape"></div>
    <div class="shape"></div>
</div>

<div class="reset-password-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <!-- Main Reset Password Card -->
                <div class="reset-password-card">
                    <!-- Header -->
                    <div class="reset-password-header">
                        <div class="password-icon">
                            <i class="fas fa-key"></i>
                        </div>
                        <h2 class="mb-2">تغيير كلمة المرور</h2>
                        <p class="mb-0 opacity-75">تحديث كلمة المرور لحسابك</p>
                    </div>

                    <!-- Body -->
                    <div class="reset-password-body">
                        <form asp-controller="Account" asp-action="ResetPassword" method="post" novalidate>
                            <!-- Hidden Fields -->
                            <input type="hidden" asp-for="IsExpired" />
                            <input type="hidden" asp-for="Token" />
                            <input type="hidden" asp-for="AdminResetUserPassword" />
                            @if (Model.AdminResetUserPassword)
                            {
                                <input type="hidden" asp-for="CurrentPassword" />
                            }

                            <!-- Information Section -->
                            <div class="form-section">
                                <h4><i class="fas fa-info-circle me-2"></i>معلومات الحساب</h4>

                                <div class="form-item">
                                    <div class="form-icon">
                                        <i class="fas fa-user"></i>
                                    </div>
                                    <div class="form-content">
                                        <label asp-for="Username" class="form-label">اسم المستخدم</label>
                                        <input asp-for="Username" class="form-control" type="text" autocomplete="off" readonly="readonly" dir="rtl" />
                                        <span asp-validation-for="Username" class="field-validation-error"></span>
                                    </div>
                                </div>
                            </div>

                            <!-- Password Section -->
                            <div class="form-section">
                                <h4><i class="fas fa-lock me-2"></i>كلمات المرور</h4>

                                @if (!Model.AdminResetUserPassword)
                                {
                                    <div class="form-item">
                                        <div class="form-icon">
                                            <i class="fas fa-key"></i>
                                        </div>
                                        <div class="form-content">
                                            <label asp-for="CurrentPassword" class="form-label">كلمة المرور الحالية</label>
                                            <input asp-for="CurrentPassword" class="form-control" type="password" autocomplete="off" placeholder="كلمة المرور الحالية" dir="rtl" />
                                            <span asp-validation-for="CurrentPassword" class="field-validation-error"></span>
                                        </div>
                                    </div>
                                }

                                <div class="form-item">
                                    <div class="form-icon">
                                        <i class="fas fa-lock"></i>
                                    </div>
                                    <div class="form-content">
                                        <label asp-for="NewPassword" class="form-label">كلمة المرور الجديدة</label>
                                        <input asp-for="NewPassword" class="form-control" type="password" autocomplete="off" placeholder="كلمة المرور الجديدة" dir="rtl" />
                                        <span asp-validation-for="NewPassword" class="field-validation-error"></span>
                                    </div>
                                </div>

                                <div class="form-item">
                                    <div class="form-icon">
                                        <i class="fas fa-check-circle"></i>
                                    </div>
                                    <div class="form-content">
                                        <label asp-for="ConfirmPassword" class="form-label">تأكيد كلمة المرور</label>
                                        <input asp-for="ConfirmPassword" class="form-control" type="password" autocomplete="off" placeholder="تأكيد كلمة المرور" dir="rtl" />
                                        <span asp-validation-for="ConfirmPassword" class="field-validation-error"></span>
                                    </div>
                                </div>
                            </div>

                            <!-- Information Alert -->
                            <div class="alert alert-info d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <span>فضلاً أدخل كلمة المرور الجديدة</span>
                            </div>

                            <!-- Validation Messages -->
                            <div class="text-center">
                                <div class="text-danger" style="font-size: 16px">
                                    @Html.ValidationMessage("error")
                                </div>
                                <div class="text-success" style="font-size: 16px">
                                    @Html.ValidationMessage("success")
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="action-buttons">
                                @if (ViewBag.passwordChanged != null)
                                {
                                    if (ViewBag.passwordChanged == "true")
                                    {
                                        <div class="alert alert-success text-center w-100">
                                            <i class="fas fa-check-circle me-2"></i>
                                            تم تغيير كلمة المرور بنجاح
                                        </div>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn-modern btn-save" id="btnSubmitPassword">
                                            <i class="fas fa-save"></i>
                                            تغيير كلمة المرور
                                        </button>
                                    }
                                }
                                else
                                {
                                    <button type="submit" class="btn-modern btn-save" id="btnSubmitPassword">
                                        <i class="fas fa-save"></i>
                                        تغيير كلمة المرور
                                    </button>
                                }

                                <a asp-controller="Account" asp-action="AccountDetails" class="btn-modern btn-cancel">
                                    <i class="fas fa-times"></i>
                                    إلغاء
                                </a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.querySelector('form');
        const newPasswordInput = document.getElementById('NewPassword');
        const confirmPasswordInput = document.getElementById('ConfirmPassword');
        const submitButton = document.getElementById('btnSubmitPassword');

        // Password validation function
        function validatePassword(password) {
            const errors = [];

            // Check minimum length (6 characters as configured)
            if (password.length < 6) {
                errors.push('كلمة المرور يجب أن تكون على الأقل 6 أحرف');
            }

            // Check for at least one digit
            if (!/\d/.test(password)) {
                errors.push('كلمة المرور يجب أن تحتوي على رقم واحد على الأقل');
            }

            // Check for at least one lowercase letter
            if (!/[a-z]/.test(password)) {
                errors.push('كلمة المرور يجب أن تحتوي على حرف صغير واحد على الأقل');
            }

            // Check for at least one uppercase letter
            if (!/[A-Z]/.test(password)) {
                errors.push('كلمة المرور يجب أن تحتوي على حرف كبير واحد على الأقل');
            }

            // Check for at least one non-alphanumeric character
            if (!/[^a-zA-Z0-9]/.test(password)) {
                errors.push('كلمة المرور يجب أن تحتوي على رمز خاص واحد على الأقل (!@@#$%^&*)');
            }

            return errors;
        }

        // Show validation error
        function showPasswordError(input, errors) {
            // Remove existing error message
            const existingError = input.parentNode.querySelector('.password-validation-error');
            if (existingError) {
                existingError.remove();
            }

            // Add new error message
            const errorDiv = document.createElement('div');
            errorDiv.className = 'password-validation-error field-validation-error';
            errorDiv.innerHTML = errors.join('<br>');
            input.parentNode.appendChild(errorDiv);

            // Add error styling
            input.classList.add('input-validation-error');
        }

        // Clear validation error
        function clearPasswordError(input) {
            const existingError = input.parentNode.querySelector('.password-validation-error');
            if (existingError) {
                existingError.remove();
            }
            input.classList.remove('input-validation-error');
        }

        // Validate password on input
        newPasswordInput.addEventListener('input', function() {
            const password = this.value;
            if (password.length > 0) {
                const errors = validatePassword(password);
                if (errors.length > 0) {
                    showPasswordError(this, errors);
                } else {
                    clearPasswordError(this);
                }
            } else {
                clearPasswordError(this);
            }
        });

        // Validate password confirmation
        confirmPasswordInput.addEventListener('input', function() {
            const password = newPasswordInput.value;
            const confirmPassword = this.value;

            // Remove existing error message
            const existingError = this.parentNode.querySelector('.password-validation-error');
            if (existingError) {
                existingError.remove();
            }

            if (confirmPassword.length > 0) {
                if (password !== confirmPassword) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'password-validation-error field-validation-error';
                    errorDiv.textContent = 'كلمة المرور غير متطابقة';
                    this.parentNode.appendChild(errorDiv);
                    this.classList.add('input-validation-error');
                } else {
                    this.classList.remove('input-validation-error');
                }
            } else {
                this.classList.remove('input-validation-error');
            }
        });

        // Form submission validation
        form.addEventListener('submit', function(e) {
            const password = newPasswordInput.value;
            const confirmPassword = confirmPasswordInput.value;
            let hasErrors = false;

            // Clear any existing errors first
            clearPasswordError(newPasswordInput);
            clearPasswordError(confirmPasswordInput);

            // Validate new password
            const passwordErrors = validatePassword(password);
            if (passwordErrors.length > 0) {
                showPasswordError(newPasswordInput, passwordErrors);
                hasErrors = true;
            }

            // Validate password confirmation
            if (password !== confirmPassword) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'password-validation-error field-validation-error';
                errorDiv.textContent = 'كلمة المرور غير متطابقة';
                confirmPasswordInput.parentNode.appendChild(errorDiv);
                confirmPasswordInput.classList.add('input-validation-error');
                hasErrors = true;
            }

            if (hasErrors) {
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();

                // Hide any loading spinners that might be showing
                const loadingSpinners = document.querySelectorAll('.spinner-border, .fa-spinner, .loading');
                loadingSpinners.forEach(spinner => spinner.style.display = 'none');

                // Scroll to first error
                const firstError = document.querySelector('.password-validation-error');
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }

                return false;
            }
        });

        // Also prevent default on button click if validation fails
        const submitButton = document.getElementById('btnSubmitPassword');
        if (submitButton) {
            submitButton.addEventListener('click', function(e) {
                const password = newPasswordInput.value;
                const confirmPassword = confirmPasswordInput.value;
                let hasErrors = false;

                // Clear any existing errors first
                clearPasswordError(newPasswordInput);
                clearPasswordError(confirmPasswordInput);

                // Validate new password
                const passwordErrors = validatePassword(password);
                if (passwordErrors.length > 0) {
                    showPasswordError(newPasswordInput, passwordErrors);
                    hasErrors = true;
                }

                // Validate password confirmation
                if (password !== confirmPassword) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'password-validation-error field-validation-error';
                    errorDiv.textContent = 'كلمة المرور غير متطابقة';
                    confirmPasswordInput.parentNode.appendChild(errorDiv);
                    confirmPasswordInput.classList.add('input-validation-error');
                    hasErrors = true;
                }

                if (hasErrors) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.stopImmediatePropagation();

                    // Hide any loading spinners that might be showing
                    const loadingSpinners = document.querySelectorAll('.spinner-border, .fa-spinner, .loading');
                    loadingSpinners.forEach(spinner => spinner.style.display = 'none');

                    // Scroll to first error
                    const firstError = document.querySelector('.password-validation-error');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }

                    return false;
                }
            });
        }
    });
</script>